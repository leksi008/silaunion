export class ContractDetail {
    constructor(contract, stages = [], documents = []) {
        this.contract = contract;
        this.stages = stages;
        this.documents = documents;
    }

    render() {
        const stagesHtml = this.stages.length
            ? `<ul>${this.stages.map(s => `<li>${s.name} (${s.status})</li>`).join('')}</ul>`
            : '<p>–ù–µ—Ç —ç—Ç–∞–ø–æ–≤</p>';

        const documentsHtml = this.documents.length
            ? `<div class="documents-list">
                ${this.documents.map(d => `
                    <div class="document-card">
                        <div class="document-info">
                            <a href="${d.file_url}" target="_blank" class="document-name">${d.name}</a>
                            <p class="document-size">${this.formatFileSize(d.size)}</p>
                        </div>
                        <div class="document-actions">
                            <button class="delete-doc-btn" data-id="${d.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                    </div>
                `).join('')}
            </div>`
            : '<p>–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>';

        return `
            <div class="contract-detail">
                <h2>–î–æ–≥–æ–≤–æ—Ä ‚Ññ${this.contract.number}</h2>
                <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${this.contract.name}</p>
                <p><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> ${this.contract.customer}</p>
                <p><strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> ${this.contract.responsible_name || '‚Äî'}</p>
                <p><strong>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</strong> ${this.contract.start_date}</p>
                <p><strong>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</strong> ${this.contract.end_date}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${ContractDetail.getStatusDisplay(this.contract.status)}</p>
                <p><strong>–ü—Ä–æ–≥—Ä–µ—Å—Å:</strong> ${this.contract.progress}%</p>

                <h3>–≠—Ç–∞–ø—ã</h3>
                ${stagesHtml}

                <h3>–î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                <div id="documentsSection">
                    ${documentsHtml}
                </div>

                <form id="uploadForm" enctype="multipart/form-data">
                    <input type="file" name="file" required />
                    <button type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </form>

                <button id="backToListBtn" class="btn-outline" style="margin-top: 20px;">
                    <i class="fas fa-arrow-left"></i> –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                </button>
            </div>
        `;
    }

formatFileSize(size) {
    if (size < 1024) return size + ' –ë';
    if (size < 1048576) return (size / 1024).toFixed(2) + ' –ö–ë';
    if (size < 1073741824) return (size / 1048576).toFixed(2) + ' –ú–ë';
    return (size / 1073741824).toFixed(2) + ' –ì–ë';
}


    bindEvents(app) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
        document.getElementById('backToListBtn')?.addEventListener('click', () => {
            app.showContractList();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        const uploadForm = document.getElementById('uploadForm');
        uploadForm?.addEventListener('submit', async (e) => {
            e.preventDefault();  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

            const fileInput = uploadForm.querySelector('input[name="file"]');
            const file = fileInput.files[0];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ñ–∞–π–ª
            if (!file) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);
            formData.append('name', file.name);
            formData.append('contract', this.contract.id);  // –î–æ–±–∞–≤–ª—è–µ–º id –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª:', file);

            try {
                const response = await fetch(`/api/contracts/${this.contract.id}/documents/`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
                    },
                    body: formData,
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('üìõ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
                    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${JSON.stringify(errorData)}`);
                }

                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                this.fetchDocuments(app);

            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', err);
                alert(err.message);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.delete-doc-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const docId = btn.dataset.id;
                try {
                    const response = await fetch(`/api/contracts/${app.currentContract.id}/documents/${docId}/`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                    this.fetchDocuments(app);

                } catch (err) {
                    console.error(err);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
                }
            });
        });
    }

    updateDocumentList() {
        const documentsHtml = this.documents.length
            ? `<ul>${this.documents.map(d => `
                <li>
                    <a href="${d.file_url}" target="_blank">${d.name}</a>
                    <button class="delete-doc-btn" data-id="${d.id}">üóëÔ∏è</button>
                </li>`).join('')}</ul>`
            : '<p>–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>';

        const section = document.getElementById('documentsSection');
        if (section) {
            section.innerHTML = documentsHtml;

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            document.querySelectorAll('.delete-doc-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const docId = btn.dataset.id;
                    try {
                        const response = await fetch(`/api/contracts/${this.contract.id}/documents/${docId}/`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${localStorage.getItem('access_token')}`
                            }
                        });

                        if (!response.ok) {
                            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
                        }

                        await this.fetchDocuments();  // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
                    } catch (err) {
                        console.error(err);
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
                    }
                });
            });
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    async fetchDocuments() {
        console.log('fetchDocuments –≤—ã–∑–≤–∞–Ω');
        try {
            const response = await fetch(`/api/contracts/${this.contract.id}/documents/`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
                }
            });

            if (response.ok) {
                this.documents = await response.json();
                this.updateDocumentList();  // üîÑ –û–±–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å DOM
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã');
            }

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', err);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã');
        }
    }



    static getStatusDisplay(status) {
        switch (status) {
            case 'active': return '–ê–∫—Ç–∏–≤–Ω—ã–π';
            case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
            case 'suspended': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            default: return status;
        }
    }
}
